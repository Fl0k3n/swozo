/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreateVmRequest,
    CreateVmRequestFromJSON,
    CreateVmRequestToJSON,
    EdtiVmRequest,
    EdtiVmRequestFromJSON,
    EdtiVmRequestToJSON,
    VmDto,
    VmDtoFromJSON,
    VmDtoToJSON,
} from '../models';

export interface AddVmRequest {
    createVmRequest: CreateVmRequest;
}

export interface DeleteVmRequest {
    id: number;
}

export interface EditVmRequest {
    id: number;
    edtiVmRequest: EdtiVmRequest;
}

/**
 * 
 */
export class VmControllerApi extends runtime.BaseAPI {

    /**
     */
    async addVmRaw(requestParameters: AddVmRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VmDto>> {
        if (requestParameters.createVmRequest === null || requestParameters.createVmRequest === undefined) {
            throw new runtime.RequiredError('createVmRequest','Required parameter requestParameters.createVmRequest was null or undefined when calling addVm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vms`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateVmRequestToJSON(requestParameters.createVmRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VmDtoFromJSON(jsonValue));
    }

    /**
     */
    async addVm(requestParameters: AddVmRequest, initOverrides?: RequestInit): Promise<VmDto> {
        const response = await this.addVmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteVmRaw(requestParameters: DeleteVmRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteVm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteVm(requestParameters: DeleteVmRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteVmRaw(requestParameters, initOverrides);
    }

    /**
     */
    async editVmRaw(requestParameters: EditVmRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<VmDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editVm.');
        }

        if (requestParameters.edtiVmRequest === null || requestParameters.edtiVmRequest === undefined) {
            throw new runtime.RequiredError('edtiVmRequest','Required parameter requestParameters.edtiVmRequest was null or undefined when calling editVm.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EdtiVmRequestToJSON(requestParameters.edtiVmRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VmDtoFromJSON(jsonValue));
    }

    /**
     */
    async editVm(requestParameters: EditVmRequest, initOverrides?: RequestInit): Promise<VmDto> {
        const response = await this.editVmRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllVmsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<VmDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/vms/all-system-vms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(VmDtoFromJSON));
    }

    /**
     */
    async getAllVms(initOverrides?: RequestInit): Promise<Array<VmDto>> {
        const response = await this.getAllVmsRaw(initOverrides);
        return await response.value();
    }

}
