/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    CreatePolicyRequest,
    CreatePolicyRequestFromJSON,
    CreatePolicyRequestToJSON,
    EditPolicyRequest,
    EditPolicyRequestFromJSON,
    EditPolicyRequestToJSON,
    PolicyDto,
    PolicyDtoFromJSON,
    PolicyDtoToJSON,
} from '../models';

export interface AddPolicyRequest {
    createPolicyRequest: CreatePolicyRequest;
}

export interface DeletePolicyRequest {
    id: number;
}

export interface EditPolicyOperationRequest {
    id: number;
    editPolicyRequest: EditPolicyRequest;
}

export interface GetAllTeacherPoliciesRequest {
    teacherId: number;
}

export interface OverwriteAllTeacherPoliciesRequest {
    userId: number;
    createPolicyRequest: Array<CreatePolicyRequest>;
}

/**
 * 
 */
export class PolicyControllerApi extends runtime.BaseAPI {

    /**
     */
    async addPolicyRaw(requestParameters: AddPolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PolicyDto>> {
        if (requestParameters.createPolicyRequest === null || requestParameters.createPolicyRequest === undefined) {
            throw new runtime.RequiredError('createPolicyRequest','Required parameter requestParameters.createPolicyRequest was null or undefined when calling addPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/policies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreatePolicyRequestToJSON(requestParameters.createPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyDtoFromJSON(jsonValue));
    }

    /**
     */
    async addPolicy(requestParameters: AddPolicyRequest, initOverrides?: RequestInit): Promise<PolicyDto> {
        const response = await this.addPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deletePolicyRaw(requestParameters: DeletePolicyRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/policies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deletePolicy(requestParameters: DeletePolicyRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deletePolicyRaw(requestParameters, initOverrides);
    }

    /**
     */
    async editPolicyRaw(requestParameters: EditPolicyOperationRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<PolicyDto>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling editPolicy.');
        }

        if (requestParameters.editPolicyRequest === null || requestParameters.editPolicyRequest === undefined) {
            throw new runtime.RequiredError('editPolicyRequest','Required parameter requestParameters.editPolicyRequest was null or undefined when calling editPolicy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/policies/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: EditPolicyRequestToJSON(requestParameters.editPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyDtoFromJSON(jsonValue));
    }

    /**
     */
    async editPolicy(requestParameters: EditPolicyOperationRequest, initOverrides?: RequestInit): Promise<PolicyDto> {
        const response = await this.editPolicyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllPoliciesRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PolicyDto>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/policies/all-system-policies`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyDtoFromJSON));
    }

    /**
     */
    async getAllPolicies(initOverrides?: RequestInit): Promise<Array<PolicyDto>> {
        const response = await this.getAllPoliciesRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllTeacherPoliciesRaw(requestParameters: GetAllTeacherPoliciesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PolicyDto>>> {
        if (requestParameters.teacherId === null || requestParameters.teacherId === undefined) {
            throw new runtime.RequiredError('teacherId','Required parameter requestParameters.teacherId was null or undefined when calling getAllTeacherPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/policies/all_teacher-policies/{teacherId}`.replace(`{${"teacherId"}}`, encodeURIComponent(String(requestParameters.teacherId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyDtoFromJSON));
    }

    /**
     */
    async getAllTeacherPolicies(requestParameters: GetAllTeacherPoliciesRequest, initOverrides?: RequestInit): Promise<Array<PolicyDto>> {
        const response = await this.getAllTeacherPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async overwriteAllTeacherPoliciesRaw(requestParameters: OverwriteAllTeacherPoliciesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<PolicyDto>>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling overwriteAllTeacherPolicies.');
        }

        if (requestParameters.createPolicyRequest === null || requestParameters.createPolicyRequest === undefined) {
            throw new runtime.RequiredError('createPolicyRequest','Required parameter requestParameters.createPolicyRequest was null or undefined when calling overwriteAllTeacherPolicies.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/policies/{userId}/overwrite`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.createPolicyRequest.map(CreatePolicyRequestToJSON),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PolicyDtoFromJSON));
    }

    /**
     */
    async overwriteAllTeacherPolicies(requestParameters: OverwriteAllTeacherPoliciesRequest, initOverrides?: RequestInit): Promise<Array<PolicyDto>> {
        const response = await this.overwriteAllTeacherPoliciesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
