/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    User,
    UserFromJSON,
    UserToJSON,
} from '../models';

export interface GetStudentListFromCourseRequest {
    courseId: number;
}

/**
 * 
 */
export class StudentControllerApi extends runtime.BaseAPI {

    /**
     */
    async getStudentListRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/students`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async getStudentList(initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.getStudentListRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getStudentListFromCourseRaw(requestParameters: GetStudentListFromCourseRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<User>>> {
        if (requestParameters.courseId === null || requestParameters.courseId === undefined) {
            throw new runtime.RequiredError('courseId','Required parameter requestParameters.courseId was null or undefined when calling getStudentListFromCourse.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/students/{courseId}`.replace(`{${"courseId"}}`, encodeURIComponent(String(requestParameters.courseId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserFromJSON));
    }

    /**
     */
    async getStudentListFromCourse(requestParameters: GetStudentListFromCourseRequest, initOverrides?: RequestInit): Promise<Array<User>> {
        const response = await this.getStudentListFromCourseRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
