/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ActivityDetailsDto,
    ActivityDetailsDtoFromJSON,
    ActivityDetailsDtoToJSON,
    ActivityFilesDto,
    ActivityFilesDtoFromJSON,
    ActivityFilesDtoToJSON,
    ActivitySummaryDto,
    ActivitySummaryDtoFromJSON,
    ActivitySummaryDtoToJSON,
    InitFileUploadRequest,
    InitFileUploadRequestFromJSON,
    InitFileUploadRequestToJSON,
    StorageAccessRequest,
    StorageAccessRequestFromJSON,
    StorageAccessRequestToJSON,
    TeacherActivityFilesDto,
    TeacherActivityFilesDtoFromJSON,
    TeacherActivityFilesDtoToJSON,
    UploadAccessDto,
    UploadAccessDtoFromJSON,
    UploadAccessDtoToJSON,
} from '../models';

export interface AckPublicActivityFileUploadRequest {
    activityId: number;
    uploadAccessDto: UploadAccessDto;
}

export interface ConfirmLinkCanBeDeliveredToStudentsRequest {
    activityModuleId: number;
}

export interface GetActivityResultFileDownloadRequestRequest {
    activityId: number;
    fileId: number;
}

export interface GetActivityResultFilesForAllStudentsRequest {
    activityId: number;
}

export interface GetActivityResultFilesForUserRequest {
    activityId: number;
}

export interface GetPublicActivityFileDownloadRequestRequest {
    activityId: number;
    fileId: number;
}

export interface GetUserActivitiesRequest {
    daysInThePast?: number;
    daysInTheFuture?: number;
}

export interface PreparePublicActivityFileUploadRequest {
    activityId: number;
    initFileUploadRequest: InitFileUploadRequest;
}

/**
 * 
 */
export class ActivityControllerApi extends runtime.BaseAPI {

    /**
     */
    async ackPublicActivityFileUploadRaw(requestParameters: AckPublicActivityFileUploadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ActivityDetailsDto>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling ackPublicActivityFileUpload.');
        }

        if (requestParameters.uploadAccessDto === null || requestParameters.uploadAccessDto === undefined) {
            throw new runtime.RequiredError('uploadAccessDto','Required parameter requestParameters.uploadAccessDto was null or undefined when calling ackPublicActivityFileUpload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/files/public`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UploadAccessDtoToJSON(requestParameters.uploadAccessDto),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityDetailsDtoFromJSON(jsonValue));
    }

    /**
     */
    async ackPublicActivityFileUpload(requestParameters: AckPublicActivityFileUploadRequest, initOverrides?: RequestInit): Promise<ActivityDetailsDto> {
        const response = await this.ackPublicActivityFileUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async confirmLinkCanBeDeliveredToStudentsRaw(requestParameters: ConfirmLinkCanBeDeliveredToStudentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.activityModuleId === null || requestParameters.activityModuleId === undefined) {
            throw new runtime.RequiredError('activityModuleId','Required parameter requestParameters.activityModuleId was null or undefined when calling confirmLinkCanBeDeliveredToStudents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/confirm-link-delivery/{activityModuleId}`.replace(`{${"activityModuleId"}}`, encodeURIComponent(String(requestParameters.activityModuleId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async confirmLinkCanBeDeliveredToStudents(requestParameters: ConfirmLinkCanBeDeliveredToStudentsRequest, initOverrides?: RequestInit): Promise<void> {
        await this.confirmLinkCanBeDeliveredToStudentsRaw(requestParameters, initOverrides);
    }

    /**
     */
    async getActivityResultFileDownloadRequestRaw(requestParameters: GetActivityResultFileDownloadRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StorageAccessRequest>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getActivityResultFileDownloadRequest.');
        }

        if (requestParameters.fileId === null || requestParameters.fileId === undefined) {
            throw new runtime.RequiredError('fileId','Required parameter requestParameters.fileId was null or undefined when calling getActivityResultFileDownloadRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/files/results/download/{fileId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters.fileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageAccessRequestFromJSON(jsonValue));
    }

    /**
     */
    async getActivityResultFileDownloadRequest(requestParameters: GetActivityResultFileDownloadRequestRequest, initOverrides?: RequestInit): Promise<StorageAccessRequest> {
        const response = await this.getActivityResultFileDownloadRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActivityResultFilesForAllStudentsRaw(requestParameters: GetActivityResultFilesForAllStudentsRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<TeacherActivityFilesDto>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getActivityResultFilesForAllStudents.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/files/results/teacher`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TeacherActivityFilesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getActivityResultFilesForAllStudents(requestParameters: GetActivityResultFilesForAllStudentsRequest, initOverrides?: RequestInit): Promise<TeacherActivityFilesDto> {
        const response = await this.getActivityResultFilesForAllStudentsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActivityResultFilesForUserRaw(requestParameters: GetActivityResultFilesForUserRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<ActivityFilesDto>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getActivityResultFilesForUser.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/files/results/student`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFilesDtoFromJSON(jsonValue));
    }

    /**
     */
    async getActivityResultFilesForUser(requestParameters: GetActivityResultFilesForUserRequest, initOverrides?: RequestInit): Promise<ActivityFilesDto> {
        const response = await this.getActivityResultFilesForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getPublicActivityFileDownloadRequestRaw(requestParameters: GetPublicActivityFileDownloadRequestRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StorageAccessRequest>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling getPublicActivityFileDownloadRequest.');
        }

        if (requestParameters.fileId === null || requestParameters.fileId === undefined) {
            throw new runtime.RequiredError('fileId','Required parameter requestParameters.fileId was null or undefined when calling getPublicActivityFileDownloadRequest.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/files/public/download/{fileId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"fileId"}}`, encodeURIComponent(String(requestParameters.fileId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageAccessRequestFromJSON(jsonValue));
    }

    /**
     */
    async getPublicActivityFileDownloadRequest(requestParameters: GetPublicActivityFileDownloadRequestRequest, initOverrides?: RequestInit): Promise<StorageAccessRequest> {
        const response = await this.getPublicActivityFileDownloadRequestRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUserActivitiesRaw(requestParameters: GetUserActivitiesRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ActivitySummaryDto>>> {
        const queryParameters: any = {};

        if (requestParameters.daysInThePast !== undefined) {
            queryParameters['daysInThePast'] = requestParameters.daysInThePast;
        }

        if (requestParameters.daysInTheFuture !== undefined) {
            queryParameters['daysInTheFuture'] = requestParameters.daysInTheFuture;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivitySummaryDtoFromJSON));
    }

    /**
     */
    async getUserActivities(requestParameters: GetUserActivitiesRequest = {}, initOverrides?: RequestInit): Promise<Array<ActivitySummaryDto>> {
        const response = await this.getUserActivitiesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async preparePublicActivityFileUploadRaw(requestParameters: PreparePublicActivityFileUploadRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<StorageAccessRequest>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling preparePublicActivityFileUpload.');
        }

        if (requestParameters.initFileUploadRequest === null || requestParameters.initFileUploadRequest === undefined) {
            throw new runtime.RequiredError('initFileUploadRequest','Required parameter requestParameters.initFileUploadRequest was null or undefined when calling preparePublicActivityFileUpload.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/files/public`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InitFileUploadRequestToJSON(requestParameters.initFileUploadRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StorageAccessRequestFromJSON(jsonValue));
    }

    /**
     */
    async preparePublicActivityFileUpload(requestParameters: PreparePublicActivityFileUploadRequest, initOverrides?: RequestInit): Promise<StorageAccessRequest> {
        const response = await this.preparePublicActivityFileUploadRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
