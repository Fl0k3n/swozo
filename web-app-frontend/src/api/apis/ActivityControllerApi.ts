/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Activity,
    ActivityFromJSON,
    ActivityToJSON,
    ActivityModule,
    ActivityModuleFromJSON,
    ActivityModuleToJSON,
} from '../models';

export interface AddActivityRequest {
    activity: Activity;
}

export interface AddModuleToActivityRequest {
    activityId: number;
    activityModuleId: number;
}

export interface DeleteActivityRequest {
    id: number;
}

export interface DeleteModuleFromActivityRequest {
    activityId: number;
    activityModuleId: number;
}

export interface GetActivityRequest {
    id: number;
}

export interface GetCourseActivityList1Request {
    id: number;
}

export interface GetLinksRequest {
    id: number;
}

export interface UpdateActivityRequest {
    id: number;
    activity: Activity;
}

/**
 * 
 */
export class ActivityControllerApi extends runtime.BaseAPI {

    /**
     */
    async addActivityRaw(requestParameters: AddActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling addActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActivityToJSON(requestParameters.activity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async addActivity(requestParameters: AddActivityRequest, initOverrides?: RequestInit): Promise<Activity> {
        const response = await this.addActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async addModuleToActivityRaw(requestParameters: AddModuleToActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling addModuleToActivity.');
        }

        if (requestParameters.activityModuleId === null || requestParameters.activityModuleId === undefined) {
            throw new runtime.RequiredError('activityModuleId','Required parameter requestParameters.activityModuleId was null or undefined when calling addModuleToActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/service-modules/{activityModuleId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"activityModuleId"}}`, encodeURIComponent(String(requestParameters.activityModuleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async addModuleToActivity(requestParameters: AddModuleToActivityRequest, initOverrides?: RequestInit): Promise<Activity> {
        const response = await this.addModuleToActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async deleteActivityRaw(requestParameters: DeleteActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteActivity(requestParameters: DeleteActivityRequest, initOverrides?: RequestInit): Promise<void> {
        await this.deleteActivityRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteModuleFromActivityRaw(requestParameters: DeleteModuleFromActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.activityId === null || requestParameters.activityId === undefined) {
            throw new runtime.RequiredError('activityId','Required parameter requestParameters.activityId was null or undefined when calling deleteModuleFromActivity.');
        }

        if (requestParameters.activityModuleId === null || requestParameters.activityModuleId === undefined) {
            throw new runtime.RequiredError('activityModuleId','Required parameter requestParameters.activityModuleId was null or undefined when calling deleteModuleFromActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{activityId}/service-modules/{activityModuleId}`.replace(`{${"activityId"}}`, encodeURIComponent(String(requestParameters.activityId))).replace(`{${"activityModuleId"}}`, encodeURIComponent(String(requestParameters.activityModuleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async deleteModuleFromActivity(requestParameters: DeleteModuleFromActivityRequest, initOverrides?: RequestInit): Promise<Activity> {
        const response = await this.deleteModuleFromActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getActivityRaw(requestParameters: GetActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async getActivity(requestParameters: GetActivityRequest, initOverrides?: RequestInit): Promise<Activity> {
        const response = await this.getActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getCourseActivityList1Raw(requestParameters: GetCourseActivityList1Request, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<ActivityModule>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourseActivityList1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{id}/service-modules`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActivityModuleFromJSON));
    }

    /**
     */
    async getCourseActivityList1(requestParameters: GetCourseActivityList1Request, initOverrides?: RequestInit): Promise<Array<ActivityModule>> {
        const response = await this.getCourseActivityList1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLinksRaw(requestParameters: GetLinksRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getLinks.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{id}/links`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getLinks(requestParameters: GetLinksRequest, initOverrides?: RequestInit): Promise<Array<string>> {
        const response = await this.getLinksRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async updateActivityRaw(requestParameters: UpdateActivityRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Activity>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateActivity.');
        }

        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling updateActivity.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("JWT_AUTH", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/activities/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ActivityToJSON(requestParameters.activity),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ActivityFromJSON(jsonValue));
    }

    /**
     */
    async updateActivity(requestParameters: UpdateActivityRequest, initOverrides?: RequestInit): Promise<Activity> {
        const response = await this.updateActivityRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
