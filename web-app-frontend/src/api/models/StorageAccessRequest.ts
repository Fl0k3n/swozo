/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface StorageAccessRequest
 */
export interface StorageAccessRequest {
    /**
     * 
     * @type {string}
     * @memberof StorageAccessRequest
     */
    provider: StorageAccessRequestProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof StorageAccessRequest
     */
    filePath: string;
    /**
     * 
     * @type {string}
     * @memberof StorageAccessRequest
     */
    signedUrl: string;
    /**
     * 
     * @type {Date}
     * @memberof StorageAccessRequest
     */
    validTo: Date;
    /**
     * 
     * @type {string}
     * @memberof StorageAccessRequest
     */
    httpMethod: string;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof StorageAccessRequest
     */
    httpHeaders: { [key: string]: string; };
}

/**
* @export
* @enum {string}
*/
export enum StorageAccessRequestProviderEnum {
    Gcloud = 'gcloud'
}

export function StorageAccessRequestFromJSON(json: any): StorageAccessRequest {
    return StorageAccessRequestFromJSONTyped(json, false);
}

export function StorageAccessRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): StorageAccessRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'provider': json['provider'],
        'filePath': json['filePath'],
        'signedUrl': json['signedUrl'],
        'validTo': (new Date(json['validTo'])),
        'httpMethod': json['httpMethod'],
        'httpHeaders': json['httpHeaders'],
    };
}

export function StorageAccessRequestToJSON(value?: StorageAccessRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'provider': value.provider,
        'filePath': value.filePath,
        'signedUrl': value.signedUrl,
        'validTo': (value.validTo.toISOString()),
        'httpMethod': value.httpMethod,
        'httpHeaders': value.httpHeaders,
    };
}

